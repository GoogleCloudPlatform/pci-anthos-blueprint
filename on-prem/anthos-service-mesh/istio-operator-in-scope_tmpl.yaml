# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: install.istio.io/v1alpha1
kind: IstioOperator
spec:
  meshConfig:
    protocolDetectionTimeout: 0s
    localityLbSetting:
      enabled: false
    # for in-scope, deny external traffic by default
    outboundTrafficPolicy:
      mode: REGISTRY_ONLY
  components:
    egressGateways:
    - enabled: true
      name: istio-egressgateway
    ingressGateways:
      - name: istio-ingress-store
        enabled: true
        k8s:
          service:
            loadBalancerIP: ${IN_SCOPE_ISTIO_INGRESS_IP}  # istio-system ingress for in-scope service
            ports:
              - name: status-port
                port: 15020
              - name: https
                port: 443
    pilot:
      k8s:
        resources:
          requests:
            cpu: 1000m
        hpaSpec:
          minReplicas: 2
        replicaCount: 2
  addonComponents:
    grafana:
      enabled: true
    prometheus:
      enabled: true
    kiali:
      enabled: true
  values:
    pilot:
      enableProtocolSniffingForOutbound: false
      enableProtocolSniffingForInbound: false
    telemetry:
      enabled: true
      v1:
        enabled: false
      v2:
        enabled: true
        metadataExchange:
          wasmEnabled: true
        prometheus:
          enabled: true
          wasmEnabled: true
        stackdriver:
          enabled: false
    sidecarInjectorWebhook:
      rewriteAppHTTPProbe: true
    global:
      meshID: ${MESH_NAME}
      network: in-scope
      meshExpansion:
        enabled: false
      multiCluster:
        enabled: true
        clusterName: in-scope
      meshNetworks:
        in-scope:
          endpoints:
          - fromRegistry: Kubernetes
          gateways:
          - address: 0.0.0.0
            port: 443
        out-of-scope:
          endpoints:
          - fromRegistry: out-of-scope
          gateways:
          - address: ${OUT_OF_SCOPE_ISTIO_INGRESS_IP}   # istio-system ingress for out-of-scope cluster
            port: 443
      controlPlaneSecurityEnabled: true
    gateways:
      istio-ingressgateway:
        loadBalancerIP: ${IN_SCOPE_ISTIO_INGRESS_IP}  # istio-system ingress for in-scope cluster
        sds:
          enabled: true
        env:
          ISTIO_META_NETWORK: in-scope
      istio-egressgateway:
        env:
          ISTIO_META_REQUESTED_NETWORK_VIEW: "external"
